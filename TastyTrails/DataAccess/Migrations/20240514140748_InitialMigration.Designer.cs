// <auto-generated />
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(TastyTrailsContext))]
    [Migration("20240514140748_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("FoodItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Pasta with white sauce, basil and parmesan",
                            Name = "Pasta Carbonara",
                            Price = 15m,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Pasta with pesto sauce, basil and parmesan",
                            Name = "Pasta Pesto",
                            Price = 11m,
                            RestaurantId = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Beef burger",
                            Name = "Clasic Burger",
                            Price = 30m,
                            RestaurantId = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Salad with chicken",
                            Name = "Chicken Salad",
                            Price = 12m,
                            RestaurantId = 3
                        },
                        new
                        {
                            Id = 5,
                            Description = "Green Salad",
                            Name = "Green Salad",
                            Price = 10m,
                            RestaurantId = 2
                        },
                        new
                        {
                            Id = 6,
                            Description = "Pancakes with nutela",
                            Name = "Pancakes",
                            Price = 7m,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 7,
                            Description = "Burger with chedar cheese",
                            Name = "CheeseBurger",
                            Price = 27m,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 8,
                            Description = "Burger with bacon",
                            Name = "Bacon Burger",
                            Price = 35m,
                            RestaurantId = 2
                        },
                        new
                        {
                            Id = 9,
                            Description = "Chips",
                            Name = "Chips",
                            Price = 5m,
                            RestaurantId = 3
                        },
                        new
                        {
                            Id = 10,
                            Description = "Vege burge",
                            Name = "Vege Burger",
                            Price = 30m,
                            RestaurantId = 3
                        },
                        new
                        {
                            Id = 11,
                            Description = "Pizza Cappricciosa",
                            Name = "Pizza Cappricciosa",
                            Price = 21m,
                            RestaurantId = 2
                        },
                        new
                        {
                            Id = 12,
                            Description = "Pizza with cheese",
                            Name = "Pizza Margherita",
                            Price = 23m,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 13,
                            Description = "Pizza with olives",
                            Name = "Pizza Venezia",
                            Price = 25m,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 14,
                            Description = "Pizza with chicken meat",
                            Name = "Pizza Chicken",
                            Price = 19m,
                            RestaurantId = 1
                        },
                        new
                        {
                            Id = 15,
                            Description = "4 types of cheese",
                            Name = "Pizza Quttro formaggi",
                            Price = 20m,
                            RestaurantId = 3
                        },
                        new
                        {
                            Id = 16,
                            Description = "Pasta, Bolognese sauce, basil, parmesan",
                            Name = "Pasta Bolognese",
                            Price = 12m,
                            RestaurantId = 3
                        },
                        new
                        {
                            Id = 17,
                            Description = "Pasta, sauce, basil, parmesan",
                            Name = "Pasta Napolitana",
                            Price = 18m,
                            RestaurantId = 2
                        },
                        new
                        {
                            Id = 18,
                            Description = "Pasta, sauce, basil, parmesan",
                            Name = "Pasta Arrabbiata",
                            Price = 24m,
                            RestaurantId = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserInfoId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Entities.OrderMenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Ammount")
                        .HasColumnType("int");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderMenuItems");
                });

            modelBuilder.Entity("Domain.Entities.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkingHours")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Addr1",
                            City = "Novi Sad",
                            Country = "Serbia",
                            Currency = "RSD",
                            Description = "Resraurant One",
                            Name = "Restaurant_One"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Addr2",
                            City = "Belgrade",
                            Country = "Serbia",
                            Currency = "RSD",
                            Description = "Resraurant Two",
                            Name = "Restaurant_Two"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Addr3",
                            City = "Novi Sad",
                            Country = "Serbia",
                            Currency = "RSD",
                            Description = "Resraurant Three",
                            Name = "Restaurant_Three"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserInfos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Addr1",
                            Email = "user1@test.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Phone = "12345"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Addr2",
                            Email = "user2@test.com",
                            FirstName = "Sara",
                            LastName = "Sara",
                            Phone = "52678"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Addr2",
                            Email = "user2@test.com",
                            FirstName = "Jack",
                            LastName = "Jack",
                            Phone = "54954"
                        });
                });

            modelBuilder.Entity("Domain.Entities.MenuItem", b =>
                {
                    b.HasOne("Domain.Entities.Restaurant", "Restaurant")
                        .WithMany("MenuItems")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.UserInfo", "UserInfo")
                        .WithMany("Orders")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Domain.Entities.OrderMenuItem", b =>
                {
                    b.HasOne("Domain.Entities.MenuItem", "MenuItem")
                        .WithMany("OrderMenuItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithMany("OrderMenuItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Entities.MenuItem", b =>
                {
                    b.Navigation("OrderMenuItems");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderMenuItems");
                });

            modelBuilder.Entity("Domain.Entities.Restaurant", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("Domain.Entities.UserInfo", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
